import React, { useEffect, useState, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { auth, db } from "../firebase/firebase";
import { addDoc, collection, serverTimestamp } from "firebase/firestore";
import { useAuth } from "../hooks/useAuth";

const Cart = () => {
  const [cart, setCart] = useState({});
  const [total, setTotal] = useState(0);
  const [timeLeft, setTimeLeft] = useState(null);
  const { user } = useAuth();
  const timerRef = useRef(null);
  const navigate = useNavigate();

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—à–∏–∫ –∑ localStorage
  const loadCart = () => {
    const storedCart = JSON.parse(localStorage.getItem("cart")) || {};
    setCart(storedCart);
  };

  useEffect(() => {
    loadCart();
    window.addEventListener("focus", loadCart);
    return () => window.removeEventListener("focus", loadCart);
  }, []);

  // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—à–∏–∫
  useEffect(() => {
    const newTotal = Object.values(cart).reduce(
      (sum, item) => sum + item.price * item.quantity,
      0
    );
    setTotal(newTotal);

    if (Object.keys(cart).length > 0) {
      localStorage.setItem("cart", JSON.stringify(cart));
    }
  }, [cart]);

  const updateQuantity = (id, quantity) => {
    if (isNaN(quantity)) return;

    const updatedCart = { ...cart };

    if (quantity <= 0) {
      delete updatedCart[id];
    } else {
      updatedCart[id].quantity = quantity;
      updatedCart[id].timestamp = Date.now();
    }

    setCart(updatedCart);
    localStorage.setItem("cart", JSON.stringify(updatedCart));
  };

  const checkout = async () => {
    if (!user) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
      return navigate("/login");
    }

    if (Object.keys(cart).length === 0) {
      alert("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
      return;
    }

    console.log("üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", {
      userId: user.uid,
      items: cart,
    });

    try {
      const response = await fetch("http://localhost:5001/api/orders", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId: user.uid,
          items: cart,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
      }

      const result = await response.json();
      console.log("üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:", result);
      console.log("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:", result);

      alert("–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ.");
      setCart({});
      localStorage.removeItem("cart");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: " + error.message);
    }
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–æ—à–∏–∫–∞ –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏
  useEffect(() => {
    const handleStorageChange = (e) => {
      if (e.key === "cart") {
        setCart(JSON.parse(e.newValue) || {});
      }
    };

    window.addEventListener("storage", handleStorageChange);
    return () => window.removeEventListener("storage", handleStorageChange);
  }, []);

  // –¢–∞–π–º–µ—Ä –∑ –æ—á–∏—â–µ–Ω–Ω—è–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫
  useEffect(() => {
    if (Object.keys(cart).length === 0) {
      setTimeLeft(null);
      return;
    }

    setTimeLeft(15);
    if (timerRef.current) clearInterval(timerRef.current);

    timerRef.current = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev === 1) {
          clearInterval(timerRef.current);
          setCart({});
          localStorage.removeItem("cart");
          return null;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timerRef.current);
  }, [cart]);

  return (
    <div>
      <h1>üõí –í–∞—à –∫–æ—à–∏–∫</h1>

      {timeLeft !== null && (
        <p style={{ color: "red" }}>
          ‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å —á–∞—Å—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: {timeLeft} —Å–µ–∫.
        </p>
      )}

      {Object.keys(cart).length === 0 ? (
        <p>
          –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É <a href="/catalog">–∫–∞—Ç–∞–ª–æ–≥</a>, —â–æ–± –¥–æ–¥–∞—Ç–∏
          –∫–Ω–∏–≥–∏.
        </p>
      ) : (
        <>
          <table>
            <thead>
              <tr>
                <th>–ù–∞–∑–≤–∞</th>
                <th>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
                <th>–¶—ñ–Ω–∞</th>
                <th>–°—É–º–∞</th>
              </tr>
            </thead>
            <tbody>
              {Object.entries(cart).map(([id, item]) => (
                <tr key={id}>
                  <td>{item.title}</td>
                  <td>
                    <input
                      type="number"
                      min="1"
                      value={item.quantity}
                      onChange={(e) =>
                        updateQuantity(id, parseInt(e.target.value, 10))
                      }
                    />
                  </td>
                  <td>{item.price} –≥—Ä–Ω</td>
                  <td>{item.price * item.quantity} –≥—Ä–Ω</td>
                </tr>
              ))}
            </tbody>
          </table>
          <h3>–†–∞–∑–æ–º: {total} –≥—Ä–Ω</h3>
          {user ? (
            <button onClick={checkout}>‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</button>
          ) : (
            <button onClick={() => navigate("/login")} style={{ backgroundColor: "#ccc" }}>
              üîê –£–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            </button>
          )}
        </>
      )}
    </div>
  );
};

export default Cart;